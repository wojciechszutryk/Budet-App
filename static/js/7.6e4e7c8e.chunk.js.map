{"version":3,"sources":["RoutePages/TranactionsPage/components/TransactionForm/TransactionForm.js"],"names":["TransactionForm","categories","budgetCategories","parentCategories","onSubmit","t","useTranslation","required","value","undefined","categoriesInBudget","filter","category","find","budgetCat","categoryId","id","groupedCategories","groupBy","categoriesToSelect","useMemo","Object","entries","map","label","parentObject","parentCategory","name","cat","initialValues","date","Date","toJSON","slice","render","handleSubmit","form","submitting","pristine","values","validate","input","meta","type","placeholder","error","touched","parse","parseFloat","step","min","className","buttonType","disabled","onClick","reset"],"mappings":"iOA6FeA,EAtFS,SAAC,GAA2E,IAA1EC,EAAyE,EAAzEA,WAAYC,EAA6D,EAA7DA,iBAAkBC,EAA2C,EAA3CA,iBAA2C,IAAzBC,gBAAyB,MAAd,aAAc,EACxFC,EAAKC,cAALD,EAEDE,EAAW,SAAAC,GAAK,OAAKA,OAAQC,EAAYJ,EAAE,aAE3CK,EAAqBT,EAAWU,QAAO,SAAAC,GAAQ,OAC7CV,EAAiBW,MAAK,SAAAC,GAAS,OAAIA,EAAUC,aAAeH,EAASI,SAGvEC,EAAoBC,kBAAQR,EAAoB,kBAEhDS,EAAqBC,mBAAQ,kBAAMC,OAAOC,QAAQL,GAAmBM,KAAI,SAAAX,GAC3E,IAAIY,EACEC,EAAetB,EAAiBU,MAAK,SAAAa,GAAc,OAAKd,EAAS,KAAOc,EAAeV,MAG7F,OAFkBQ,EAAdC,EAAsBA,EAAaE,KAC1BtB,EAAE,SACR,0BAA4BmB,MAAOA,EAAnC,SACFZ,EAAS,GAAGW,KAAI,SAAAK,GAAG,OAChB,wBAAqBpB,MAAOoB,EAAIZ,GAAhC,SAAqCY,EAAID,MAA5BC,EAAIZ,QAFHJ,EAAS,SAKhC,CAACK,EAAmBd,EAAkBE,IAEzC,OACI,qCACI,6BAAKA,EAAE,qBACP,cAAC,IAAD,CACID,SAAUA,EACVyB,cAAe,CAAEd,WAAY,IAAKe,MAAM,IAAIC,MAAOC,SAASC,MAAM,EAAE,KACpEC,OAAQ,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,WAAYC,EAAnC,EAAmCA,SAAnC,EAA6CC,OAA7C,OACJ,uBAAMnC,SAAU+B,EAAhB,UACI,cAAC,IAAD,CAAOR,KAAK,cAAca,SAAUjC,EAApC,SACK,gBAAGkC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACG,eAAC,IAAD,WACI,cAAC,IAAD,2BAAeD,GAAf,IAAsBE,KAAK,OAAOC,YAAY,iBAC9C,cAAC,IAAD,UAAQvC,EAAE,iBACTqC,EAAKG,OAASH,EAAKI,SAAW,cAAC,IAAD,UAAUJ,EAAKG,cAI1D,cAAC,IAAD,CAAOlB,KAAK,SAASa,SAAUjC,EAAUwC,MAAO,SAAAvC,GAAK,OAAIwC,WAAWxC,EAAM,KAA1E,SACK,gBAAGiC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACG,eAAC,IAAD,WACI,cAAC,IAAD,2BAAeD,GAAf,IAAsBE,KAAK,SAASM,KAAM,IAAML,YAAY,SAASM,IAAK,OAC1E,cAAC,IAAD,UAAQ7C,EAAE,YACTqC,EAAKG,OAASH,EAAKI,SAAW,cAAC,IAAD,UAAUJ,EAAKG,cAI1D,cAAC,IAAD,CAAOlB,KAAK,aAAZ,SACK,gBAAGc,EAAH,EAAGA,MAAH,EAAUC,KAAV,OACG,eAAC,IAAD,WACI,cAAC,IAAD,UAAQrC,EAAE,cACV,cAAC,IAAD,2BAAgBoC,GAAhB,aACKtB,WAKjB,cAAC,IAAD,CAAOQ,KAAK,OAAOa,SAAUjC,EAA7B,SACK,gBAAGkC,EAAH,EAAGA,MAAH,EAAUC,KAAV,OACG,eAAC,IAAD,WACI,cAAC,IAAD,2BAAeD,GAAf,IAAsBE,KAAK,UAC3B,cAAC,IAAD,UAAQtC,EAAE,gBAItB,sBAAK8C,UAAU,UAAf,UACI,cAAC,IAAD,CAAQC,WAAW,SAAST,KAAK,SAASU,SAAUhB,GAAcC,EAAlE,SACKjC,EAAE,YAEP,cAAC,IAAD,CACI+C,WAAW,QACXT,KAAK,SACLW,QAASlB,EAAKmB,MAHlB","file":"static/js/7.6e4e7c8e.chunk.js","sourcesContent":["import React, {useMemo} from 'react'\r\nimport {Form, Field} from 'react-final-form'\r\nimport {groupBy} from 'lodash';\r\nimport {FormField, FormGroup, FormSelect, Label, Message} from \"components/Input/InputStyles\";\r\nimport {Button} from \"components\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst TransactionForm = ({categories, budgetCategories, parentCategories, onSubmit = () => {}}) => {\r\n    const {t} = useTranslation();\r\n\r\n    const required = value => (value ? undefined : t('Required'));\r\n\r\n    const categoriesInBudget = categories.filter(category =>(\r\n            budgetCategories.find(budgetCat => budgetCat.categoryId === category.id)\r\n    ));\r\n\r\n    const groupedCategories = groupBy(categoriesInBudget, 'parentCategory');\r\n\r\n    const categoriesToSelect = useMemo(() => Object.entries(groupedCategories).map(category => {\r\n        let label;\r\n        const parentObject = parentCategories.find(parentCategory => (category[0] === parentCategory.id));\r\n        if (parentObject) label = parentObject.name;\r\n        else label = t('Other')\r\n        return <optgroup key={category[0]} label={label}>\r\n            {category[1].map(cat => (\r\n                <option key={cat.id} value={cat.id}>{cat.name}</option>\r\n            ))}\r\n        </optgroup>\r\n    }),[groupedCategories, parentCategories, t]);\r\n\r\n    return(\r\n        <>\r\n            <h1>{t('Add Transaction')}</h1>\r\n            <Form\r\n                onSubmit={onSubmit}\r\n                initialValues={{ categoryId: \"0\", date: new Date().toJSON().slice(0,10)}}\r\n                render={({ handleSubmit, form, submitting, pristine, values }) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Field name=\"description\" validate={required}>\r\n                            {({ input, meta }) => (\r\n                                <FormGroup>\r\n                                    <FormField {...input} type=\"text\" placeholder=\"Description\"/>\r\n                                    <Label>{t('description')}</Label>\r\n                                    {meta.error && meta.touched && <Message>{meta.error}</Message>}\r\n                                </FormGroup>\r\n                            )}\r\n                        </Field>\r\n                        <Field name=\"amount\" validate={required} parse={value => parseFloat(value,10)}>\r\n                            {({ input, meta }) => (\r\n                                <FormGroup>\r\n                                    <FormField {...input} type=\"number\" step={0.01} placeholder=\"Amount\" min={0.01}/>\r\n                                    <Label>{t('amount')}</Label>\r\n                                    {meta.error && meta.touched && <Message>{meta.error}</Message>}\r\n                                </FormGroup>\r\n                            )}\r\n                        </Field>\r\n                        <Field name=\"categoryId\">\r\n                            {({ input, meta }) => (\r\n                                <FormGroup>\r\n                                    <Label>{t('category')}</Label>\r\n                                    <FormSelect {...input}>\r\n                                        {categoriesToSelect}\r\n                                    </FormSelect>\r\n                                </FormGroup>\r\n                            )}\r\n                        </Field>\r\n                        <Field name=\"date\" validate={required}>\r\n                            {({ input, meta }) => (\r\n                                <FormGroup>\r\n                                    <FormField {...input} type=\"date\"/>\r\n                                    <Label>{t('date')}</Label>\r\n                                </FormGroup>\r\n                            )}\r\n                        </Field>\r\n                        <div className=\"buttons\">\r\n                            <Button buttonType=\"submit\" type=\"submit\" disabled={submitting || pristine}>\r\n                                {t('Submit')}\r\n                            </Button>\r\n                            <Button\r\n                                buttonType=\"reset\"\r\n                                type=\"button\"\r\n                                onClick={form.reset}\r\n                            >\r\n                                Reset\r\n                            </Button>\r\n                        </div>\r\n                    </form>\r\n                )}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TransactionForm;\r\n"],"sourceRoot":""}