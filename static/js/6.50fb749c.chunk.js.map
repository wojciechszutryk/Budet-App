{"version":3,"sources":["RoutePages/TranactionsPage/components/ImportTransactions/components/DropFile.js","RoutePages/TranactionsPage/components/ImportTransactions/utilities.js","RoutePages/TranactionsPage/components/ImportTransactions/ImportTransactionsStyles.js","RoutePages/TranactionsPage/components/ImportTransactions/components/InputWrapper.js","RoutePages/TranactionsPage/components/ImportTransactions/components/OutputTable.js","RoutePages/TranactionsPage/components/ImportTransactions/ImportTransactions.js"],"names":["DropFile","props","suppress","evt","stopPropagation","preventDefault","onDrop","files","dataTransfer","handleFile","onDragEnter","onDragOver","children","SheetJSFT","map","x","join","StyledImportedTransactionsList","styled","ul","theme","colors","orange","dark","StyledImportedTransactionsNumber","span","StyledLabel","label","StyledInputTransactionFile","input","StyledRead","StyledInfo","div","InputWrapper","t","useTranslation","className","htmlFor","type","id","accept","onChange","e","target","ConnectedOutputTable","connect","state","activeBudget","common","otherCategoryId","budget","data","budgetCategories","allCategories","queryClient","useQueryClient","budgetCategoriesWithNames","budgetCategory","find","category","categoryId","transactions","useMemo","transaction","length","amountIndex","field","Number","isNaN","indexOf","name","date","substring","replaceAll","split","year","val","day","newDate","reverse","toString","description","amount","filter","trans","rowsNumber","transactionDescriptions","Object","entries","Math","random","correctTransactionsToShow","slice","addTransactionMutation","useMutation","API","addTransition","disabled","onClick","forEach","budgetId","mutate","onSuccess","refetchQueries","informationNotification","ImportTransactions","useState","setData","cols","setCols","file","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","XLSX","read","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","header","refstr","o","C","decode_range","c","i","encode_col","key","make_cols","readAsArrayBuffer"],"mappings":"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","file":"static/js/6.50fb749c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst DropFile = (props) => {\r\n    const suppress = (evt) => {\r\n        evt.stopPropagation();\r\n        evt.preventDefault();\r\n    }\r\n    const onDrop = (evt) => {\r\n        evt.stopPropagation();\r\n        evt.preventDefault();\r\n        const files = evt.dataTransfer.files;\r\n        if (files && files[0]) props.handleFile(files[0]);\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onDrop={onDrop}\r\n            onDragEnter={suppress}\r\n            onDragOver={suppress}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DropFile;","import XLSX from \"xlsx\";\r\n\r\nexport const SheetJSFT = [\r\n    \"xlsx\",\r\n    \"xlsb\",\r\n    \"xlsm\",\r\n    \"xls\",\r\n    \"xml\",\r\n    \"csv\",\r\n    \"txt\",\r\n    \"ods\",\r\n    \"fods\",\r\n    \"uos\",\r\n    \"sylk\",\r\n    \"dif\",\r\n    \"dbf\",\r\n    \"prn\",\r\n    \"qpw\",\r\n    \"123\",\r\n    \"wb*\",\r\n    \"wq*\",\r\n    \"html\",\r\n    \"htm\"\r\n]\r\n    .map(function(x) {\r\n        return \".\" + x;\r\n    })\r\n    .join(\",\");\r\n\r\nexport const make_cols = refstr => {\r\n    let o = [],\r\n        C = XLSX.utils.decode_range(refstr).e.c + 1;\r\n    for (let i = 0; i < C; ++i) o[i] = { name: XLSX.utils.encode_col(i), key: i };\r\n    return o;\r\n};","import styled from 'styled-components'\r\n\r\nexport const StyledImportedTransactionsList = styled.ul`\r\n  margin-left: 23px;\r\n  & li::before {\r\n    content: \"\\\\2022\";\r\n    color: ${({theme}) => theme.colors.orange.dark};\r\n    font-weight: bold;\r\n    display: inline-block;\r\n    width: 1em;\r\n    margin-left: -1em;\r\n  }\r\n`;\r\n\r\nexport const StyledImportedTransactionsNumber = styled.span`\r\n  font-weight: 600;\r\n  color: ${({theme}) => theme.colors.orange.dark};\r\n`;\r\n\r\nexport const StyledLabel = styled.label`\r\n  position:absolute;\r\n  min-width:200px;\r\n  text-align:center;\r\n  top: 19px;\r\n  left: 80px;\r\n  font-weight: 600;\r\n`;\r\n\r\nexport const StyledInputTransactionFile = styled.input`\r\n  margin-top: 25px;\r\n  margin-left: 14px;\r\n  width: 262px;\r\n  height: 100px;\r\n  border: 2px solid black;\r\n  background-color: #ccc;\r\n`;\r\n\r\nexport const StyledRead =styled.span`\r\n  display: block;\r\n  width: 290px;\r\n  text-align: center\r\n`;\r\n\r\nexport const StyledInfo = styled.div`\r\n  position: absolute;\r\n  left: 30px;\r\n  top: 20px;\r\n  height: 16px;\r\n  width: 40px;\r\n  background-color: #ddd;\r\n  border: 2px solid black;\r\n  border-radius: 4px;\r\n  line-height:12px;\r\n  font-size: 12px;\r\n  & div{\r\n    display: none;\r\n  }\r\n  & div p{\r\n    margin-top: 5px;\r\n  }\r\n  & div p:last-child{\r\n    font-weight: 600;\r\n  }\r\n  \r\n  &:hover div {\r\n    z-index: 1;\r\n    display: block;\r\n    margin-top: 11px;\r\n    margin-left: -13px;\r\n    width: 262px;\r\n    height: 100px;\r\n    padding: 10px;\r\n    border: 2px solid black;\r\n    background-color: #fff;\r\n  }\r\n`;","import React from \"react\";\r\nimport {SheetJSFT} from \"../utilities\";\r\nimport {StyledInfo, StyledInputTransactionFile, StyledLabel} from \"../ImportTransactionsStyles\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst InputWrapper = (props) => {\r\n    const {t} = useTranslation();\r\n    const handleChange = (e) =>{\r\n        const files = e.target.files;\r\n        if (files && files[0]) props.handleFile(files[0]);\r\n    }\r\n    return (\r\n        <form className=\"form-inline\">\r\n            <div className=\"form-group\">\r\n                <StyledLabel htmlFor=\"file\">{t('Import from file')}</StyledLabel>\r\n                <StyledInfo>\r\n                    INFO\r\n                    <div>\r\n                        <p>{t('Select file with available file extension.\\nPreferred format .xlsx\\nFile should contain columns in order')}:</p>\r\n                        <p>{t('Description | Amount | Date | Category')}</p>\r\n                    </div>\r\n                </StyledInfo>\r\n                <StyledInputTransactionFile\r\n                    type=\"file\"\r\n                    id=\"file\"\r\n                    accept={SheetJSFT}\r\n                    onChange={handleChange}\r\n                />\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default InputWrapper;\r\n","import React, {useMemo} from \"react\";\r\nimport {\r\n    StyledImportedTransactionsList,\r\n    StyledImportedTransactionsNumber,\r\n    StyledRead\r\n} from \"../ImportTransactionsStyles\";\r\nimport {SubmitButton} from \"components/Button/ButtonStyles\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {connect} from \"react-redux\";\r\nimport {useMutation, useQueryClient} from \"react-query\";\r\nimport {informationNotification} from \"utilities/functions\";\r\nimport API from \"../../../../../data/fetch\";\r\n\r\nconst OutputTable = ({data, budgetCategories, allCategories, activeBudget, otherCategoryId}) => {\r\n    const {t} = useTranslation();\r\n    const queryClient = useQueryClient();\r\n\r\n    const budgetCategoriesWithNames = budgetCategories.budgetCategories.map(budgetCategory => (\r\n        {...budgetCategory, ...allCategories.find(category => budgetCategory.categoryId === category.id)}\r\n    ));\r\n\r\n    const transactions = useMemo(() => data.map(transaction => {\r\n        if(transaction.length >= 4) {\r\n            const amountIndex = transaction.map(field => {\r\n                if (typeof(field) === 'number' && !Number.isNaN(field)) return transaction.indexOf(field)\r\n                return null;\r\n            }).find(type => type !== null);\r\n            if (amountIndex && typeof(transaction[amountIndex-1])==='string'\r\n                && typeof(transaction[amountIndex+1])==='string' && typeof(transaction[amountIndex+2])==='string'){\r\n                let categoryId = budgetCategoriesWithNames.find(category => category.name === transaction[amountIndex+2]);\r\n                if (!categoryId) categoryId = otherCategoryId;\r\n                else categoryId = categoryId.categoryId;\r\n                const date = transaction[amountIndex+1].substring(0,10).replaceAll('.','-').split('-')\r\n                const year = date.find(val => val.length === 4);\r\n                const day = date.find(val => val.length === 2);\r\n                const month = date.reverse().find(val => val.length === 2);\r\n                const newDate = year + '-' + month + '-' + day;\r\n                return {\r\n                    categoryId: categoryId.toString(),\r\n                    date: newDate,\r\n                    description: transaction[amountIndex-1].toString(),\r\n                    amount: transaction[amountIndex]\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }).filter(trans => trans !== null),[budgetCategoriesWithNames, data, otherCategoryId]);\r\n\r\n    const rowsNumber = useMemo( () => transactions.length,[transactions.length]);\r\n\r\n    const transactionDescriptions =  Object.entries(transactions).map(transaction => {\r\n        return(\r\n            <li key={transaction[1].id + transaction[1].description + transaction[1].amount*Math.random()}>{transaction[1].description}</li>\r\n        )\r\n    });\r\n\r\n    const correctTransactionsToShow = rowsNumber > 7 ? transactionDescriptions.slice(0,7) : transactionDescriptions;\r\n\r\n    const addTransactionMutation = useMutation(API.budget.addTransition)\r\n\r\n    const handleCheckAndSubmit = () => {\r\n        transactions.forEach(transaction => {\r\n            transaction.budgetId = activeBudget.toString();\r\n            addTransactionMutation.mutate({data: transaction}, {onSuccess: () => {\r\n                queryClient.refetchQueries()\r\n            }})\r\n        })\r\n        informationNotification(\"Succeeded in adding Transactions\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <StyledRead>\r\n                {t(`Successfully read `)}\r\n                <StyledImportedTransactionsNumber>\r\n                    {rowsNumber}\r\n                </StyledImportedTransactionsNumber>\r\n                {` ${t('transactions')}${rowsNumber > 7 ? ` ${t(\"(first 7)\")}:` : ':'}`}\r\n            </StyledRead>\r\n            <StyledImportedTransactionsList>\r\n                {correctTransactionsToShow}\r\n            </StyledImportedTransactionsList>\r\n            <SubmitButton\r\n                disabled={rowsNumber===0}\r\n                onClick={handleCheckAndSubmit}\r\n            >\r\n                {rowsNumber>0 ? t('add')+' '+rowsNumber+' '+t('transactions') : t('Attach correct file')}\r\n            </SubmitButton>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ConnectedOutputTable = connect(state =>\r\n    ({\r\n        activeBudget: state.common.activeBudget,\r\n        otherCategoryId: state.budget.otherCategoryId,\r\n    }))\r\n(OutputTable);\r\n\r\nexport default ConnectedOutputTable;","import React from \"react\";\r\nimport XLSX from \"xlsx\";\r\nimport DropFile from \"./components/DropFile\";\r\nimport InputWrapper from \"./components/InputWrapper\";\r\nimport OutputTable from \"./components/OutputTable\";\r\nimport {make_cols} from \"./utilities\";\r\nimport {useState} from \"react\";\r\n\r\nconst ImportTransactions = ({budgetCategories, allCategories}) => {\r\n    const [data, setData] = useState([]);\r\n    const [cols, setCols] = useState([]);\r\n\r\n    const handleFile = (file) => {\r\n        const reader = new FileReader();\r\n        const rABS = !!reader.readAsBinaryString;\r\n        reader.onload = e => {\r\n            const bstr = e.target.result;\r\n            const wb = XLSX.read(bstr, { type: rABS ? \"binary\" : \"array\" });\r\n            const wsname = wb.SheetNames[0];\r\n            const ws = wb.Sheets[wsname];\r\n            const data = XLSX.utils.sheet_to_json(ws, { header: 1 });\r\n            setCols(make_cols(ws[\"!ref\"]));\r\n            setData(data)\r\n        };\r\n        if (rABS) reader.readAsBinaryString(file);\r\n        else reader.readAsArrayBuffer(file);\r\n    }\r\n\r\n    return (\r\n        <DropFile handleFile={handleFile}>\r\n            <div className=\"row\">\r\n                <div className=\"col-xs-12\">\r\n                    <InputWrapper handleFile={handleFile} />\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-xs-12\">\r\n                    <OutputTable budgetCategories={budgetCategories} allCategories={allCategories} data={data} cols={cols}/>\r\n                </div>\r\n            </div>\r\n        </DropFile>\r\n    );\r\n};\r\n\r\nexport default ImportTransactions;"],"sourceRoot":""}